* Python - Del 2: Funksjoner
** Repetisjon fra i går - oppgave
Lag tre spørsmål om det vi jobbet med i går som du skriver inn på ditt område på OneNote. Hvert spørsmål må ha fire svar. Ett eller flere av svarene må være riktige. Skriv i parantes etter svaret om det er riktig eller ikke. Jeg kommer til å bruke spørsmålene og svarene deres for å lage en repetisjonskahoot.
- Spørsmål 1:
- Svar 1: Svar (riktig eller feil)
- Svar 2: Svar (riktig eller feil)
- Svar 3: Svar (riktig eller feil)
- Svar 4: Svar (riktig eller feil)
- Spørsmål 2
- Svar 1: Svar (riktig eller feil)
- Svar 2: Svar (riktig eller feil)
- Svar 3: Svar (riktig eller feil)
- Svar 4: Svar (riktig eller feil)
- Spørsmål 3:
- Svar 1: Svar (riktig eller feil)
- Svar 2: Svar (riktig eller feil)
- Svar 3: Svar (riktig eller feil)
- Svar 4: Svar (riktig eller feil)
- Spørsmål 4:
- Svar 1: Svar (riktig eller feil)
- Svar 2: Svar (riktig eller feil)
- Svar 3: Svar (riktig eller feil)
- Svar 4: Svar (riktig eller feil)
  
** Funksjoner
- Matematikere bruker funksjoner for slippe å skrive utregninger på nytt hver gang. I stedet har man en funksjon eller formel og så putter man inn verdier i variablene som gjerne heter x, y og z i mattematikk.
- Programmerere bruker også funksjoner for å slippe å gjenta utregninger eller kode flere ganger og man putter verdier inn i funksjonene og får resultater ut av de.

** Innebygde funksjoner
- Python kommer med mange innebygde funksjoner som gjør vanlige ting.
- F.eks. abs som gir oss absoluttverdien av et tall.

>>> abs(-9)
9
>>> abs(3.3)
3.3

- Hver av de to uttrykkene over er det vi kaller et funksjonsoppkall (function call).
- Funksjonsoppkall skrives på denne måten:
>>> funksjonsnavn (argumenter)

- Et argument er et uttrykk på innsiden av parantesene til et funksjonsoppkall. I abs(-9) gir vi argumentet 9 til funksjonen abs.
- Her er kode som beregner forskjellen mellom dagtemperatur og nattetemperatur:
  #+begin_src python
    dagtemperatur = 3
    nattetemperatur = 10
    return abs(dagtemperatur - nattetemperatur)
  #+end_src

  #+RESULTS:
  : 7

- Her er argumentet vi gir funksjonen abs dagtemperatur-nattetemperatur.

*** Hvordan python kjører en funksjon
- Evaluer hvert argument en etter en fra venstre til høyre.
- Gi resultatet av evalueringen av verdiene til funksjonen.
- Kjør funksjonen. Når funksjonen er ferdig spytter den ut en verdi.

- Fordi funksjoner returnerer en verdi kan vi bruke de som argumenter i andre funksjoner.
  #+begin_src python
    return pow(abs(-2), round(4.3))
  #+end_src

  #+RESULTS:
  : 16

- Python ser funksjonsoppkallet til pow og starter med å evaluere argumentene fra venstre til høyre. Siden det første argumentet er et funksjonsoppkall til abs må det først evalueres og så evalueres det neste argumentet som er et funksjonsoppkall til round. Når det er gjort kjøres pow med verdien argumentene har blitt evaluert til og den returnerer et svar.

- Noen av de nyttigste funksjonene er de som konverterer fra en type til en annen. Funksjonene int() og float() gjør det.

>>> int(34.6)
34
>>> int(-4.3)
-4
>>> float(21)
21.0

- Her ser vi at når vi gjør om en float (et desimaltall) til en int (et heltall) med funksjonen int så rundes ikke tallet opp eller ned. I stedet tas bare desimalene vekk.

- Hvis man er i tvil hva en funksjon gjør kan må bruke funksjonen help() i python shellet.
>>> help(abs)
Help on built-in

function abs

in module builtins:

abs(x, /)
Return the absolute value of the argument.

- Den første linja sier hvilken funksjon som blir beskrevet og hvilken modul den hører til. Her er modulen builtins. (Moduler er en måte å organisere kode på i Python som vi ser mer på senere.) Så kan vi se formen til funksjone. Vi kan se at abs forventer ett argument. (Skråstreken betyr at det ikke er flere argumenter.) Til sist får vi en forklaring på hva funksjonen gjør på engelsk.

- En annen innebygd funksjon er round() som runder en float til nærmeste int hvis vi gir den ett argument.
>>>round(3.8)
4
>>>round(3.3)
3
>>>round(3.5)
4
>>>round(-3.3)
-3
>>>round(-3.5)
-4

- Hvis vi gir den to argumenter runder den en float til en float med så mange desimaler som det andre argumentet sier.
>>> round(3.141592653, 2)
3.14

-Hvis man ber om hjelp for round får man dette:
>>> help(round)
Help on built-in function round in module builtins:
round(...)
round(number[, ndigits]) -> number
Round a number to a given precision in decimal digits (default 0 digits).
This returns an int when called with one argument, otherwise the
same type as the number. ndigits may be negative.

- Som vi ser over må vi ha ett argument, men det andre som står i klammeparentes er valgfritt. Vi ser også at funksjonen gir oss et tall tilbake. (->number)

- Her er hjelp for pow():
>>> help(pow)
Help on built-in function pow in module builtins:
pow(x, y, z=None, /)
Equivalent to x**y (with two arguments) or x**y % z ( with three arguments)
Some types, such as ints, are able to use a more efficient algorithm when invoked using the three argument form.

- Dette viser at funksjonen pow() kan bli kalt opp med enten to eller tre argumenter. Når vi kaller den med to argumenter er det det samme som å opphøye det første argumentet i det andre. Med tre opphøyer den det første argumentet i det andre argumentet og deler på det tredje og gir resten som svar (modulo % gir oss resten av et delestykke).

*** Konvertere fra int til float og visa versa
- Et par veldig nyttige innebygde funksjoner i python er int() og float(). int() tar en float og tar vekk desimalene (ikke runder av) og float() gjør om en int til float ved å legge til .0.

>>> int(34.6)
34
>>> int(-4.3)
-4
>>> float(21)
21.0

*** Finne hjelp
- En annen nyttig innebygd funksjon er help() som gir oss informasjon om funksjoner (og andre ting) i python.

>>> help(abs)
Help on built-in

function abs

in module builtins:

abs(x, /)
Return the absolute value of the argument.

- Den første linja sier hva som beskrives.
- Den andre forteller oss hvor i python det er.
- Så sier den hvordan man kaller funksjonen og hvor mange argumenter den skal ha. Når det står en / betyr det at det ikke er flere argumenter.
- Så kommer en engelsk forklaring på hva funksjonen gjør.

- Her er hjelp for den innebygde funksjonen round():
>>> help(round)
Help on built-in function round in module builtins:
round(...)
round(number[, ndigits]) -> number
Round a number to a given precision in decimal digits (default 0 digits).
This returns an int when called with one argument, otherwise the
same type as the number. ndigits may be negative.

- Vi ser at denne funksjonen tar ett eller to argumenter og gir oss et tall tilbake. Den engelske forklaringen viser oss at hvis vi gir den ett tall runder den tallet til nærmeste int, hvis vi gir den to argumenter runder den til antallet desimaler det andre argumentet spesifiserer.
>>>round(3.8)
4
>>>round(3.3)
3
>>>round(3.5)
4
>>>round(-3.3)
-3
>>>round(-3.5)
-4
>>> round(3.141592653, 2)
3.14

- Her har vi hjelp for pow():
>>> help(pow)
Help on built-in function pow in module builtins:
pow(x, y, z=None, /)
Equivalent to x**y (with two arguments) or x**y 9s z ( with three arguments)
Some types, such as ints, are able to use a more efficient algorithm when
invoked using the three argument form.

- Det viser oss at funksjonen kan ha to eller tre argumenter. Med to opphøyer den det første argumentet i det andre (samme som å skrive (x ** y).
- Hvis man har tre argumenter opphøyer den det første argumentet i det andre og deler på det tredje. Svaret vi får ut er resten etter delestykket.
>>> pow(2, 4)
16
>>> pow(2, 4, 3)
1
- Vi vet at 2 ** 4 er 16, og så er 16 / 3 = 5 og 1 i rest som er det vi får ut.

- Python holder styr på adressen i hukommelsen til de ulike variablene, funksjonene, verdiene osv i objekter i hukommelsen.

- Hvert objekt har en id.
>>> help(id)
Help on built-in

function id in module builtins:

id(obj, /)
Return the identity of an object.
This is guaranteed to be unique among simultaneously existing objects.
(CPython uses the object's memory address.)

- Vi kan f.eks. prøve å finne iden til et par ulike ting:
>>> id(-9)
4301189552
>>> id(23.1)
4298223160
>>> shoe size = 8.5
>>> id(shoe_size)
4298223112
>>> fahrenheit = 77.7
>>> id(fahrenheit)
4298223064

- Hvis du prøver ut dette får du ulike adresser enn det som står her fordi verdiene blir lagret der det er ledig plass i hukommelsen.
- Funksjoner har også adresser:
>>> id(abs)
4297868712
>>> id(round)
4297871160
